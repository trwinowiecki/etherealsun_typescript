create table "public"."favorite_products" (
    "user_id" uuid not null,
    "product_id" text not null
);

alter table
    "public"."favorite_products" enable row level security;

create table "public"."featured_groups" (
    "id" bigint generated by default as identity not null,
    "title" text,
    "start_date" timestamp with time zone,
    "end_date" timestamp with time zone,
    "created_at" timestamp with time zone default now()
);

alter table
    "public"."featured_groups" enable row level security;

create table "public"."featured_products" (
    "id" text not null,
    "group_id" bigint not null
);

alter table
    "public"."featured_products" enable row level security;

create table "public"."profiles" (
    "id" uuid not null,
    "first_name" text,
    "last_name" text,
    "square_id" text,
    "updated_at" timestamp with time zone
);

alter table
    "public"."profiles" enable row level security;

CREATE UNIQUE INDEX favorite_products_pk ON public.favorite_products USING btree (user_id, product_id);

CREATE UNIQUE INDEX featured_groups_pkey ON public.featured_groups USING btree (id);

CREATE UNIQUE INDEX featured_products_pkey ON public.featured_products USING btree (id);

CREATE UNIQUE INDEX profiles_pkey ON public.profiles USING btree (id);

alter table
    "public"."favorite_products"
add
    constraint "favorite_products_pk" PRIMARY KEY using index "favorite_products_pk";

alter table
    "public"."featured_groups"
add
    constraint "featured_groups_pkey" PRIMARY KEY using index "featured_groups_pkey";

alter table
    "public"."featured_products"
add
    constraint "featured_products_pkey" PRIMARY KEY using index "featured_products_pkey";

alter table
    "public"."profiles"
add
    constraint "profiles_pkey" PRIMARY KEY using index "profiles_pkey";

alter table
    "public"."featured_products"
add
    constraint "featured_products_group_id_fkey" FOREIGN KEY (group_id) REFERENCES featured_groups(id) not valid;

alter table
    "public"."featured_products" validate constraint "featured_products_group_id_fkey";

alter table
    "public"."profiles"
add
    constraint "profiles_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table
    "public"."profiles" validate constraint "profiles_id_fkey";

set
    check_function_bodies = off;

create policy "Enable all for users based on user_id" on "public"."favorite_products" as permissive for all to public using ((auth.uid() = user_id));

create policy "Enable delete for users based on user_id" on "public"."favorite_products" as permissive for delete to public using ((auth.uid() = user_id));

create policy "Enable insert for authenticated users only" on "public"."favorite_products" as permissive for
insert
    to authenticated with check (true);

create policy "Enable read access for all users" on "public"."featured_groups" as permissive for
select
    to public using (true);

create policy "Enable read access for all users" on "public"."featured_products" as permissive for
select
    to public using (true);

create policy "Profiles are visible only by user." on "public"."profiles" as permissive for
select
    to public using ((auth.uid() = id));

create policy "Users can insert their own profile." on "public"."profiles" as permissive for
insert
    to public with check ((auth.uid() = id));

create policy "Users can update own profile." on "public"."profiles" as permissive for
update
    to public using ((auth.uid() = id));